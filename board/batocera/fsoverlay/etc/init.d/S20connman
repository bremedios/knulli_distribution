#!/bin/sh

SCRIPT_NAME=S20connman
### choose configuration file
BATOCONF="/userdata/system/batocera.conf"
BOOTCONF="/boot/batocera-boot.conf"
DEBUG_LOG=/userdata/system/logs/S20connman.log

#  add -d to DEBUG_MODE to put connman into debug mode, you'll also need to adjust syslog
#  have connman log to syslog.
#
#  NOTE: This is not yet working.
DEBUG_MODE=

# if /userdata is not yet available
if ! [ -f "$BATOCONF" ]; then
    # use the boot version of the file
    BATOCONF="$BOOTCONF"
fi
### #### ###

# WLAN enabled?
settingsWlan="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi.enabled)"

# Set initial hostname, to be sent in connman DHCP Request
#
# Note that if the DHCP server sends back a hostname, connman will set
# that as the system hostname.
#
# Later in the boot process, /etc/init.d/S26system will then reset the
# hostname to the value specified in the system.hostname setting
# ("BATOCERA" by default), but will do so *only* if the
# system.hostname setting is absent or blank.
#
# This leaves the user in control of the hostname to be set, and also
# lets the user allow for dynamic hostname configuration from DHCP, by
# setting the system.hostname setting to a blank empty string.
batocera_hostname() {
    echo "$(date -u): starting initial hostname configuration" > /tmp/hostname.log
    settings_hostname="$(/usr/bin/batocera-settings-get -f "$BATOCONF" system.hostname)"

    if [ -n "$settings_hostname" ]; then
        echo "Setting initial hostname from system.hostname: ${settings_hostname}" >> /tmp/hostname.log
        hostname="$settings_hostname"
    else
        echo "Setting default initial hostname BATOCERA" >> /tmp/hostname.log
        hostname="BATOCERA"
    fi

    hostname "${hostname}"
}

# configure wifi files, always
batocera_wifi_configure() {
    echo "$SCRIPT_NAME: batocera_wifi_configure" >> $DEBUG_LOG
    X=$1

    settings_hide=false; settings_name="${X}"
    [ "$X" = "1" ] && { X=; settings_name=default; }
    [ "$X" = ".hidden" ] && { settings_name=hidden_AP; settings_hide=true; }

    settings_ssid="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi${X}.ssid)"
    settings_key="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi${X}.key)"
    settings_file="/var/lib/connman/batocera_wifi${X}.config"

    #  Disabled as this will log your SSID details which may not be wanted by users.
    #echo "$SCRIPT_NAME: batocera_wifi_configure: ssid: $settings_ssid" >> $DEBUG_LOG
    #echo "$SCRIPT_NAME: batocera_wifi_configure: ssid: $settings_key" >> $DEBUG_LOG
    #echo "$SCRIPT_NAME: batocera_wifi_configure: ssid: $settings_file" >> $DEBUG_LOG

    if [ -n "${settings_key}" ]; then
        optionalPassphrase="Passphrase=${settings_key}"
    else
        optionalPassphrase=
    fi

    if [ -n "$settings_ssid" -a "$settingsWlan" = "1" ];then
        mkdir -p "/var/lib/connman"
        cat > "${settings_file}" <<-_EOF_
		[global]
		Name=batocera
		[service_batocera_${settings_name}]
		Type=wifi
		Name=${settings_ssid}
		Hidden=${settings_hide}
		${optionalPassphrase}
		Autoconnect=true
	_EOF_
    else
        rm "${settings_file}" 2>/dev/null
    fi
}

wifi_configure_all() {
    echo "$SCRIPT_NAME: wifi_configure_all:" >> $DEBUG_LOG

    for i in 1 2 3 .hidden; do
        batocera_wifi_configure "$i"
    done
}

max_connection_wait=3
wait_for_connection() {
    echo "    Waiting for connection" | tee -a $DEBUGLOG
    for n in `seq 1 $max_connection_wait`; do
        echo "    Checking connmanctl state [$n of $max_connection_wait]" | tee -a $DEBUGLOG
        connmanctl state > /tmp/connmanctl_state.log
        
        if grep -q "State = idle" /tmp/connmanctl_state.log ; then
            echo "        Idle." | tee -a /tmp/S20connman.log
            cat /tmp/connmanctl_state.log | tee -a $DEBUGLOG
        else
            echo "        Not idle" | tee -a /tmp/S20connman.log
            cat /tmp/connmanctl_state.log | tee -a $DEBUGLOG
            break
        fi
        sleep 1
    done
    
    return 0
}

# These variables are only needed by the disabled code below
ENABLE_RETRY_COUNT=1
DELAY_ENABLE_TO_SCAN=1

wifi_enable() {
    echo "$SCRIPT_NAME: wifi_enable()" >> $DEBUG_LOG

    settingsCountry="$(/usr/bin/batocera-settings-get -f "$BATOCONF" wifi.country)"
    [ -n "$settingsCountry" ] && /usr/sbin/iw reg set "$settingsCountry"
        
    echo "$SCRIPT_NAME: wifi_enable(): Country: $settingsCountry" >> $DEBUG_LOG
    
    #  Extra 'enable wifi' to deal with the 'No Carrier' error that can occur on 5Ghz
    echo "$SCRIPT_NAME: wifi_enable(): '> connmanctl enable wifi'" >> $DEBUG_LOG
    
    connmanctl enable wifi 2>> $DEBUG_LOG >> $DEBUG_LOG
    sleep 1
    
    echo "$SCRIPT_NAME: wifi_enable(): '> connmanctl enable wifi'" >> $DEBUG_LOG
    
    connmanctl enable wifi 2>> $DEBUG_LOG >> $DEBUG_LOG
    sleep 1
    
    echo "$SCRIPT_NAME: wifi_enable(): '> connmanctl scan wifi'" >> $DEBUG_LOG
    #  We redirect the output of scan wifi because we need to check for a NO CARRIER error.
    connmanctl scan wifi 2> /tmp/connmanctl_scan_wifi.err > /tmp/connmanctl_scan_wifi.log 
    
    cat /tmp/connmanctl_scan_wifi.log >> $DEBUG_LOG
    cat /tmp/connmanctl_scan_wifi.err >> $DEBUG_LOG
    
    if grep -q "wifi: No carrier" /tmp/connmanctl_scan_wifi.err ; then
        echo "$SCRIPT_NAME: wifi_enable(): NO CARRIER:  Restart Daemon" >> $DEBUG_LOG
    fi
    
    echo "$SCRIPT_NAME: wifi_enable(): '> connmanctl technologies'" >> $DEBUG_LOG
    connmanctl technologies >> $DEBUG_LOG 2>> $DEBUG_LOG
}

wifi_disable() {
    echo "$SCRIPT_NAME: wifi_disable():" >> $DEBUG_LOG
    
    echo "$SCRIPT_NAME: wifi_disable(): > connmanctl disable wifi" >> $DEBUG_LOG
    
    connmanctl disable wifi >> $DEBUG_LOG 2>> $DEBUG_LOG
}

case "$1" in
    start)
        echo "$SCRIPT_NAME: start" >> $DEBUG_LOG
        
        batocera_hostname
        wifi_configure_all
        
        echo "$SCRIPT_NAME: start: > start-stop-daemon -S -q -m -b -p /var/run/connmandd.pid --exec /usr/sbin/connmand -- -n -r $DEBUG_MODE" >> $DEBUG_LOG
        start-stop-daemon -S -q -m -b -p /var/run/connmand.pid --exec /usr/sbin/connmand -- -n -r $DEBUG_MODE  2>> $DEBUG_LOG >> $DEBUG_LOG

        sleep 2
        
        for i in $(seq 1 20); do
            echo "$SCRIPT_NAME: start > connmanctl state" >> $DEBUG_LOG
            if connmanctl state 2>> $DEBUG_LOG | tee -a $DEBUG_LOG | grep -qE '^[ ]*State[ ]='; then
                break
            fi
            sleep 0.25
        done
        sleep 0.5

        if [ "$settingsWlan" = "1" ];then
            # Disable WiFi before we enable it.
            wifi_disable
            sleep 2
            wifi_enable
        else
            wifi_disable
        fi

        echo "$SCRIPT_NAME: start: done." >> $DEBUG_LOG
        echo "done."
    ;;
    stop)
        echo "$SCRIPT_NAME: stop" >> $DEBUG_LOG
        printf "Stopping connman: "
        
        echo "$SCRIPT_NAME: stop: >start-stop-daemon -K -q -p /var/run/connmand.pid" >> $DEBUG_LOG
        
        start-stop-daemon -K -q -p /var/run/connmand.pid  2>> $DEBUG_LOG >> $DEBUG_LOG
        echo "$SCRIPT_NAME: stop: done." >> $DEBUG_LOG
        echo "done."
        ;;
    restart | reload)
        $0 stop
        sleep 3
        $0 start
        ;;
    *)
        echo "usage: $0 {start|stop|restart|reload}"
        ;;
esac
